EGUNDO PLAYBOOK:

register: condicao - nome que registro para a task
ignore_erros: yes - ignora se falhar e continua o playbook

Consigo incluir variaveis no playbook e chamaremos playbook ex:
ansible-playbook -e "username=bruno pacote=cowsay" segunda.yaml

modulo debug:

uma variavel do ansible tem varios valores e o modulo vai me informar qual o valor

TERCEIRO PLAYBOOK:

- trabalho com loop
   with_items - esse Ã© um modulo que faz o looping

list servicos
puppet resource service

servico especifico
puppet resource service cron

puppet resource service ntp ensure=running

puppet resource package
puppet resource package ntpdate ensure=present

facter
facter hostname

ss -ntpl | grep 8140

vim /etc/default/puppetserver

CLIENT
puppet config print
fica em segundos
puppet config set runinterval 60

pdk new module config

# puppet:// == /etc/puppetlabs/code/environment/homolog

ssh -i /etc/keys/devops.pem docker.dexter.com.br

puppet agent -t --server devops.dexter.com.br --environment homolog

puppet cert list

puppet cert sign docker.dexter.com.br
puppet cert sign --all


node "default"
{
        include config
}

node automation.dexter.com.br {
        include httpd
}

node docker.dexter.com.br {
        include base
        include apache
}


-----------------------------------------------
Docker

install docker ubuntu

Servico de gerenciamento de container.

Container - carinha que cria um chroot - se isola. Cria um isolamento de um hash.


DOCKER => DOCKER SWARN => KUBERNETES OU K8S => OPENSHIFT OU COREOS OU RANCHEROS

primeira camada - leitura (base-imagem)
layer2 - container em si

docker container run --name helloword debian ls /etc

docker container ls

docker container ls -a

acessar o entrepoint:

docker attach romantic_goldstine

docker stats romantic_goldstine

Criar uma nova imagem:

docker commit romantic_goldstine minha_ansible 

Copiar arquivo para minha maquina:
docker cp firstimage:/srv/devops .



Encaminhar arquivo:
docker cp devops firstimage:/srv/devops.bkp
Validar:
docker exec firstimage ls /srv
devops
devops.bkp

Apagar image
docker rmi centos

Apagar todas as imagens que nao estao com container
docker image prune




A partir de um arquivo de configuracao:
docker build -t deploy .

mount de disco
docker run -dti --name dir -v /srv/data:/data debian


Criar volume

docker volume ls

docker volume create --name data

Onde armazena os volumes do docker:


root@docker:/srv/data# cd /var/lib/docker/volumes/
root@docker:/var/lib/docker/volumes# cd data/_data/
root@docker:/var/lib/docker/volumes/data/_data# ls 
olamundo
root@docker:/var/lib/docker/volumes/data/_data# 


3 tipos de criar volume no docker:

# docker run -dti -v /srv/data:/dircontainer debian
# docker run -dti -v data:/dircontainer debian  
# docker run -dti -v /dircontainer debian


Saber os comandos que foram executados na imagem:

docker history <container>

Trazer as infos do container:
docker inspect <container>


usando porta

docker run -d -p <porta da minha maquina><porta do container> --name <nome> 


Docker Compose:

https://docs.docker.com/compose/install/

docker-compose --version

Arquivo que colocamos uma serie de instrucoes para rodar o container mais facil


Comando bacana, parar todos os conatainers que estao parados:

docker stop $(docker ps -q)

remove todos
docker rm -f $(docker ps -qa)


wordpress_dexter:
 image: wordpress
 links: - link para conectar o container
   - mysql_dexter:mysql
 ports:
  - 80:80

mysql_dexter:
 image: mariadb
 environment:
  MYSQL_ROOT_PASSWORD: dexter - variavel de ambiente 


Interface grafica do docker:

https://www.portainer.io/
